// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  hashedPassword String
  profileImage   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  teams          TeamMember[]
  createdTeams   Team[]         @relation("CreatedTeams")
  meetings       Meeting[]
  notes          Note[]
  files          File[]
  notifications  Notification[]
  Task           Task[]
}

model Team {
  id           String         @id @default(uuid())
  name         String         @unique
  createdBy    User           @relation("CreatedTeams", fields: [userId], references: [id])
  userId       String
  createdAt    DateTime       @default(now())
  members      TeamMember[]
  meetings     Meeting[]
  files        File[]
  Notification Notification[]
  Task         Task[]
}

model TeamMember {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  role     Role
  joinedAt DateTime @default(now())

  @@unique([userId, teamId])
}

model Note {
  id        String   @id @default(uuid())
  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  meetingId String?
  content   String   @db.Text
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model File {
  id         String   @id @default(uuid())
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  uploadedBy User     @relation(fields: [userId], references: [id])
  userId     String
  fileUrl    String
  fileName   String
  fileType   String
  uploadedAt DateTime @default(now())
}

model Notification {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  meetingId String?

  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  type      NotificationType
  content   String           @db.Text
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  Team      Team?            @relation(fields: [teamId], references: [id])
  teamId    String?
}

model Meeting {
  id            String         @id @default(uuid())
  team          Team           @relation(fields: [teamId], references: [id])
  teamId        String
  title         String
  description   String?        @db.Text
  scheduledAt   DateTime
  createdBy     User           @relation(fields: [userId], references: [id])
  userId        String
  status        Status
  notes         Note[]
  notifications Notification[]
}

model Task {
  id            String         @id @default(uuid())
  team          Team           @relation(fields: [teamId], references: [id])
  teamId        String
  title         String
  description   String?        @db.Text
  dueDate       DateTime
  assignedTo    User           @relation(fields: [userId], references: [id])
  userId        String
  status        TaskStatus
  notifications Notification[]
}

enum NotificationType {
  MEETING_REMINDER
  MEETING_UPDATE
  TASK_DUE
  TASK_ASSIGNED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Status {
  SCHEDULED
  ONGOING
  COMPLETED
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}
